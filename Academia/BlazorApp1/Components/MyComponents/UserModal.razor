@inherits OwningComponentBase // importante para obtener ScopedServices

@inject ClientService.Student.IStudentService studentService

<div class="row">
    @if (this.student != null)
    {
        <div class="col-5 col-md-3 text-start">
            <label class="fw-bold">Nombre: </label>
        </div>
        <div class="col-12 col-md-12 mb-2">
            <input type="text" class="form-control" @bind="@this.student.Name" />
        </div>

        <div class="col-5 col-md-3 text-start">
            <label class="fw-bold">Apellido: </label>
        </div>
        <div class="col-12 col-md-12 mb-2">
            <input type="text" class="form-control" @bind="@this.student.Lastname" />
        </div>

        <div class="col-5 col-md-3 text-start">
            <label class="fw-bold">Email: </label>
        </div>
        <div class="col-12 col-md-12 mb-2">
            <input type="email" class="form-control" @bind="@this.student.Email" />
        </div>

        <div class="col-5 col-md-3 text-start">
            <label class="fw-bold">Teléfono: </label>
        </div>
        <div class="col-12 col-md-12 mb-2">
            <input type="tel" class="form-control" @bind="@this.student.PhoneNumber" />
        </div>

        <div class="col-5 col-md-3 text-start">
            <label class="fw-bold">Dirección: </label>
        </div>
        <div class="col-12 col-md-12 mb-2">
            <input type="text" class="form-control" @bind="@this.student.Address" />
        </div>

        <div class="col-5 col-md-3 text-start">
            <label class="fw-bold">Fecha de Nacimiento: </label>
        </div>
        <div class="col-12 col-md-12 mb-2">
            <input type="date" class="form-control" @bind="@this.student.BirthDate" />
        </div>
    }

    <div class="text-end col-4 w-100 py-3">
        <button onclick="@HandleSubmit" class="btn btn-primary btn-md">@ButtonText</button>
    </div>
</div>

@code {
    public enum ModalMode { Create, Edit };

    public ApplicationCore.Model.Student? student;
    private ModalMode _Mode;
    private string ButtonText = "";

    [Parameter] public int? StudentId { get; set; }
    [Parameter] public ModalMode Mode { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> CloseModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        await this.GetStudent();
        await base.OnParametersSetAsync();
    }

    private async void HandleSubmit()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(student?.Name) && !string.IsNullOrWhiteSpace(student?.Lastname))
            {
                if (this.Mode == ModalMode.Create)
                {
                    await this.studentService.CreateAsync(new ApplicationCore.Model.Student
                        {
                            Name = student.Name,
                            Lastname = student.Lastname,
                            Email = student.Email,
                            PhoneNumber = student.PhoneNumber,
                            Address = student.Address,
                            BirthDate = student.BirthDate
                        });
                }
                else
                {
                    await this.studentService.UpdateAsync(this.student);
                }
                await CloseModal.InvokeAsync();
            }
        }
        catch (Exception)
        {
            throw;
        }
    }

    private async Task GetStudent()
    {
        if (_Mode == ModalMode.Create)
        {
            ButtonText = "Crear";
            this.student = new ApplicationCore.Model.Student();
        }
        else
        {
            ButtonText = "Guardar Cambios";
            if (StudentId != null)
            {
                this.student = await studentService.GetById((int)StudentId);
            }
        }
    }
}
