@inherits OwningComponentBase


<div class="row">
	<div class="col-5 col-md-3 text-start">
		<label class="fw-bold">Nombre: </label>
	</div>
	<div class="col-12 col-md-12 mb-2">
		<input type="text" class="form-control" @bind="@this.student.Name" />
	</div>

	<div class="col-5 col-md-3 text-start">
		<label class="fw-bold">Apellido: </label>
	</div>
	<div class="col-12 col-md-12 mb-2">
		<input type="text" class="form-control" @bind="@this.student.Lastname" />
	</div>

	<div class="col-5 col-md-3 text-start">
		<label class="fw-bold">Email: </label>
	</div>
	<div class="col-12 col-md-12 mb-2">
		<input type="email" class="form-control" @bind="@this.student.Email" />
	</div>

	<div class="col-5 col-md-3 text-start">
		<label class="fw-bold">Teléfono: </label>
	</div>
	<div class="col-12 col-md-12 mb-2">
		<input type="tel" class="form-control" @bind="@this.student.PhoneNumber" />
	</div>

	<div class="col-5 col-md-3 text-start">
		<label class="fw-bold">Dirección: </label>
	</div>
	<div class="col-12 col-md-12 mb-2">
		<input type="text" class="form-control" @bind="@this.student.Address" />
	</div>

	<div class="col-5 col-md-3 text-start">
		<label class="fw-bold">Fecha de Nacimiento: </label>
	</div>
	<div class="col-12 col-md-12 mb-2">
		<input type="date" class="form-control" @bind="@this.student.BirthDate" />
	</div>

	<div class="text-end col-4 w-100 py-3">
		<button onclick="@HandleSubmit" class="btn btn-primary btn-md">@ButtonText</button>
	</div>
</div>

@code {
	public enum ModalMode { Create, Edit };

	private ClientService.Student.IStudentService studentService;
	public ApplicationCore.Model.Student? student;
	private ModalMode _Mode;
	private string ButtonText = "";

	[Parameter] public int? StudentId { get; set; }
	[Parameter] public ModalMode Mode { get; set; }
	[Parameter] public EventCallback<MouseEventArgs> CloseModal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		base.OnInitialized();
	}

	public override async Task SetParametersAsync(ParameterView parameters)
	{
		this.studentService = ScopedServices.GetRequiredService<ClientService.Student.IStudentService>();
		if (parameters.TryGetValue<int>(nameof(StudentId), out var value))
		{
			if (value != this.StudentId)
			{
				this.StudentId = value;
				parameters.TryGetValue<ModalMode>(nameof(Mode), out var mode_param);
				this._Mode = mode_param;
			}
		}
		await base.SetParametersAsync(parameters);
	}
	protected override async Task OnParametersSetAsync()
	{

		await this.GetStudent();

		await base.OnParametersSetAsync();
	}

	private async void HandleSubmit()
	{
		try
		{
			if (!string.IsNullOrWhiteSpace(student?.Name) && !string.IsNullOrWhiteSpace(student?.Lastname))
			{
				switch (_Mode)
				{
					case ModalMode.Edit:
						await this.studentService.Update(this.student);
						break;
					case ModalMode.Create:
						var newStudent = new ApplicationCore.Model.Student
							{
								Name = student.Name,
								Lastname = student.Lastname,
								Email = student.Email,
								PhoneNumber = student.PhoneNumber,
								Address = student.Address,
								BirthDate = student.BirthDate,
							};
						await this.studentService.Create(newStudent);
						break;

					default:
						break;
				}
				await CloseModal.InvokeAsync();
			}
		}
		catch (Exception ex)
		{

		}
	}

	private async Task GetStudent()
	{
		if (_Mode == ModalMode.Create)
		{
			ButtonText = "Crear";
			this.student = new ApplicationCore.Model.Student();
		}
		else
		{
			ButtonText = "Guardar Cambios";
			if (StudentId != null)
			{
				this.student = await studentService.GetById((int)StudentId);
			}
		}
	}
}
