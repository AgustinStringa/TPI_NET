@using BlazorApp1.Services
@inject UserStateService UserStateService

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">BlazorApp1</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/login" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Login
            </NavLink>
        </div>
        @if (UserStateService.IsUserLoggedIn)
        {

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="areas">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Especialidades
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="curriculums">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Planes de Estudio
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="users">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Estudiantes
            </NavLink>
        </div>

        }
    </nav>
</div>

@code {
    protected override void OnInitialized()
    {
        // Suscribirse al cambio de estado del usuario
        UserStateService.OnUserStateChanged += StateHasChanged;
        StateHasChanged();
    }

    public void Dispose()
    {
        // Desuscribirse al evento cuando el componente se destruye
        UserStateService.OnUserStateChanged -= StateHasChanged;
        StateHasChanged();
    }
}