@page "/curriculums"
@inherits OwningComponentBase 

@rendermode InteractiveServer
@using MyComponents

<h1>Planes De Estudios</h1>

@if (curriculums != null && curriculums.Count() >= 0)
{
	<Modal @ref="modal" UseStaticBackdrop="true" CloseOnEscape="false" />

	<div class="text-end my-3 px-3">
		<button type="button"
				data-toggle="modal" data-target="#exampleModal"
				class="btn btn-primary btn-lg" @onclick="async () => await ShowCurriculumModal(CurriculumModal.ModalMode.Create, null)">
			Crear Plan de Estudio
		</button>
	</div>
	
	<div class="px-3">
	<table class="table table-striped">
		<thead class="thead-dark table-dark">
			<tr>
				<th scope="col">Descripción</th>
				<th scope="col">Especialidad</th>
				<th scope="col">Editar</th>
				<th scope="col">Eliminar</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var curriculum in curriculums)
			{
				<tr>
					<th scope="row">@curriculum.Description.Trim()</th>
					<th scope="row">@curriculum.Area?.Description.Trim()</th>
					<td>
						<button 
							 @onclick="async () => await ShowCurriculumModal(CurriculumModal.ModalMode.Edit, curriculum.Id)"
							>
							<i class="bi bi-pencil-square"></i>
						</button>
					</td>
					<td>
							<button @onclick="async () => await ShowDeleteModal(curriculum.Id)">
								<i class="bi bi-trash"></i>
							</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
	</div>

	@if (isAlertErrorVisible)
	{
		<div class="alert alert-danger" role="alert">
			No se puede eliminar este plan de estudio porque tiene elementos que dependen de él.
		</div>
	}
} else
{
	<div class="alert alert-danger" role="alert">
		Error de conexion con el servidor
	</div>
}




@code {

	private ClientService.Curriculum.ICurriculumService curriculumService;
	private IEnumerable<ApplicationCore.Model.Curriculum> curriculums = new List<ApplicationCore.Model.Curriculum>();
	private Modal modal = default!;
	private bool isAlertErrorVisible = false;

	protected async override Task OnInitializedAsync()
	{
		this.curriculumService = ScopedServices.GetRequiredService<ClientService.Curriculum.ICurriculumService>();
		await GetCurriculums();
	}

	public async Task ShowDeleteModal(int? CurriculumId)
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Message", "¿Estás seguro que deseas eliminar?");
		parameters.Add("OnConfirm", EventCallback.Factory.Create<MouseEventArgs>(this, async () => await DeleteCurriculum(CurriculumId.Value)));
		parameters.Add("OnCancel", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModal));
		await modal.ShowAsync<DeleteModal>(title: "Eliminar Plan de Estudio", parameters: parameters);
	}


	private async Task ShowCurriculumModal(CurriculumModal.ModalMode Mode, int? CurriculumId)

	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Mode", Mode);
		parameters.Add("CloseModal", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModal));
		if (CurriculumId != null)
		{
			parameters.Add("CurriculumId", CurriculumId);
		}

		try
		{

			if (Mode == CurriculumModal.ModalMode.Create)
			{
				await modal.ShowAsync<CurriculumModal>(title: "Crear Plan de estudio", parameters: parameters);
			}
			else if (Mode == CurriculumModal.ModalMode.Edit)
			{
				await modal.ShowAsync<CurriculumModal>(title: "Editar Plan de estudio", parameters: parameters);
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}


	private async Task CloseModal()
	{
		await modal.HideAsync();
		await GetCurriculums();
		await InvokeAsync(StateHasChanged); 
	}

	private async Task GetCurriculums()
	{
		try
		{
			this.curriculums = await curriculumService.GetAllWithArea();
		}
		catch (Exception e)
		{

			if (e as System.Net.Http.HttpRequestException != null 
			&&
			(e as System.Net.Http.HttpRequestException)?.HttpRequestError == HttpRequestError.ConnectionError
			)
			{
				this.curriculums = null;
			}
		}
	}

	private async Task DeleteCurriculum(int id)
	{
		try
		{
			await this.curriculumService.Delete(id);
			await CloseModal();
			await this.GetCurriculums();
		}
		catch (Exception e)
		{
			
			if (e.Message.Contains("No se puede eliminar") || e.Message.Contains("tiene elementos que dependen de él"))
			{
				
				this.isAlertErrorVisible = true; 
			}
			else
			{
				
				this.isAlertErrorVisible = true; 
			}

			async Task TriggerDelay()
			{
				await Task.Delay(2000);
				this.isAlertErrorVisible = false;
				StateHasChanged();
			}
			TriggerDelay();
		}
	}
}
