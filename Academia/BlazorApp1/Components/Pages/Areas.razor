@page "/areas"
@* @inject ClientService.Area.IAreaService AreaService this is a way to inject service. revise microsfot docs. *@
@inherits OwningComponentBase // important to get ScopedServices
@rendermode InteractiveServer //important to update varss
@using MyComponents

<h1>Especialidades</h1>
@if (areas != null && areas.Count() >= 0)
{
	<!--use static backdrop y close on escape para evitar que se quede el valor de un area anterior cuando no se cierra por la cruz-->
	<Modal @ref="modal" UseStaticBackdrop="true" CloseOnEscape="false" />

	<div class="text-end my-3 px-3">
		<button type="button"
				data-toggle="modal" data-target="#exampleModal"
				class="btn btn-primary btn-lg" @onclick="async () => await ShowAreaModal(AreaModal.ModalMode.Create, null)">
			Crear Especialidad
		</button>
	</div>

	<div class="px-3">
		<table class="table table-striped">
			<thead class="thead-dark table-dark">
				<tr>
					<th scope="col">Descripción</th>
					<th scope="col">Editar</th>
					<th scope="col">Eliminar</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var area in areas)
				{
					<tr>
						<th scope="row">@area.Description.Trim()</th>
						<td>
							<button @onclick="async () => await ShowAreaModal(AreaModal.ModalMode.Edit, area.Id)">
								<i class="bi bi-pencil-square"></i>
							</button>
						</td>
						<td>
							<button>
								<i @onclick="async () => await ShowDeleteModal(area.Id)" class="bi bi-trash"></i>
							</button>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

} else {
<div class="alert alert-danger" role="alert">
	Error de conexion con el servidor
</div>
}

@if (isAlertErrorVisible)
{
	<Alert Color="@AlertColor.Danger" Dismissable="true" Class="position-absolute bottom-0"> <Icon Name="@IconName.XCircleFill" class="me-2"></Icon>No puedes eliminar una especialidad con datos relacionados </Alert>
}

@code {
	private bool isAlertErrorVisible = false;
	private Modal modal = default!;
	private ClientService.Area.IAreaService areaService;
	private IEnumerable<ApplicationCore.Model.Area> areas = new List<ApplicationCore.Model.Area>();


	private async Task ShowAreaModal(AreaModal.ModalMode Mode, int? AreaId)

	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Mode", Mode);
		parameters.Add("CloseModal", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModal));
		if (AreaId != null)
		{
			parameters.Add("AreaId", AreaId);
		}

		try
		{

			if (Mode == AreaModal.ModalMode.Create)
			{
				await modal.ShowAsync<AreaModal>(title: "Crear Especialidad", parameters: parameters);
			}
			else if (Mode == AreaModal.ModalMode.Edit)
			{
				await modal.ShowAsync<AreaModal>(title: "Editar Especialidad", parameters: parameters);
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}

	public async Task ShowDeleteModal(int? AreasId)
	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Message", "¿Estás seguro que deseas eliminar?");
		parameters.Add("OnConfirm", EventCallback.Factory.Create<MouseEventArgs>(this, async () => await DeleteArea(AreasId.Value)));
		parameters.Add("OnCancel", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModal));
		await modal.ShowAsync<DeleteModal>(title: "Eliminar Especialidad", parameters: parameters);


	}

	private async Task CloseModal()
	{
		await modal.HideAsync();
		await GetAreas();
	}

	private async Task DeleteArea(int id)
	{
		try
		{
			await this.areaService.DeleteAsync(id);
			await this.GetAreas();
		}
		catch (Exception e)
		{
			if (e.Message == "Can't delete an Area with related Curriculums")
			{
				this.isAlertErrorVisible = true;
				async Task TriggerDelay()
				{
					await Task.Delay(2000);
					this.isAlertErrorVisible = false;
					StateHasChanged();
				}
				TriggerDelay();
			}
		}

	}
		/*
		* OwningComponentBase is an abstract,
		* disposable child of the ComponentBase
		* type with a protected ScopedServices
		* property of type IServiceProvider.
		*/

	protected async override Task OnInitializedAsync()
	{
		this.areaService = ScopedServices.GetRequiredService<ClientService.Area.IAreaService>();
		await GetAreas();
	}

	private async Task GetAreas()
	{
		try
		{
			this.areas = await areaService.GetAllAsync();
		}
		catch (Exception e)
		{
			this.areas = null;
			Console.WriteLine(e);
		}
	}
}
