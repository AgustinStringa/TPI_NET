@page "/areas"
@* @inject ClientService.Area.IAreaService AreaService this is a way to inject service. revise microsfot docs. *@
@inherits OwningComponentBase // important to get ScopedServices
@rendermode InteractiveServer //important to update varss
@using MyComponents


<Modal @ref="modal" />
<h1>Especialidades</h1>
<div class="text-end my-3 px-3">
	<button type="button"
			data-toggle="modal" data-target="#exampleModal"
			class="btn btn-primary btn-lg" @onclick="async () => await ShowAreaModal(AreaModal.ModalMode.Create, null)">
		Crear Especialidad
	</button>
</div>

<div class="px-3">
	<table class="table table-striped">
		<thead class="thead-dark table-dark">
			<tr>
				<th scope="col">Descripción</th>
				<th scope="col">Editar</th>
				<th scope="col">Eliminar</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var area in areas)
			{
				<tr>
					<th scope="row">@area.Description.Trim()</th>
					<td>
						<button @onclick="async () => await ShowAreaModal(AreaModal.ModalMode.Edit, area.Id)">
							<i class="bi bi-pencil-square"></i>
						</button>
					</td>
					<td>
						<button>
							<i class="bi bi-trash"></i>
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>

@code {

	private Modal modal = default!;

	private async Task ShowAreaModal(AreaModal.ModalMode Mode, int? AreaId)

	{
		var parameters = new Dictionary<string, object>();
		parameters.Add("Mode", Mode);
		if (AreaId != null)
		{
			parameters.Add("AreaId", AreaId);
			parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, UpdateArea));
		}
		else
		{
			parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, CreateArea));
		}

		try
		{

			if (Mode == AreaModal.ModalMode.Create)
			{
				await modal.ShowAsync<AreaModal>(title: "Crear Especialidad", parameters: parameters);
			}
			else if (Mode == AreaModal.ModalMode.Edit)
			{
				await modal.ShowAsync<AreaModal>(title: "Editar Especialidad", parameters: parameters);
			}
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}

	private async Task UpdateArea()
	{
		await modal.HideAsync();

	}

	private async Task CreateArea()
	{
		await modal.HideAsync();
	}

	/*
		* OwningComponentBase is an abstract,
		* disposable child of the ComponentBase
		* type with a protected ScopedServices
		* property of type IServiceProvider.
		*/
	private ClientService.Area.IAreaService areaService;
	private IEnumerable<ApplicationCore.Model.Area> areas = new List<ApplicationCore.Model.Area>();

	protected async override Task OnInitializedAsync()
	{
		this.areaService = ScopedServices.GetRequiredService<ClientService.Area.IAreaService>();
		await GetAreas();
	}

	private async Task GetAreas()
	{
		try
		{
			this.areas = await areaService.GetAllAsync();
			Console.WriteLine(this.areas);
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
		}
	}
}
